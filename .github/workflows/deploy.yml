name: Provision EKS and Deploy Node.js App

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: sample
  ECR_REPO_NAME: node-repo
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_TAG: latest

jobs:
  #terraform:
    #name: Provision EKS Cluster
    #runs-on: ubuntu-latest
    #defaults:
      #run:
        #working-directory: eks-terraform
    #steps:
      #- name: Checkout
      #  uses: actions/checkout@v3

      #- name: Setup Terraform
      #  uses: hashicorp/setup-terraform@v2
      #  with:
      #    terraform_version: 1.3.2

      #- name: Configure AWS Credentials
      #  uses: aws-actions/configure-aws-credentials@v2
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: ${{ env.AWS_REGION }}

      #- name: Terraform Init
      # run: terraform init

      #- name: Terraform plan
      #  run: terraform plan

      #- name: Terraform Apply
      #  run: terraform apply -auto-approve
      
  build-push-deploy:
    name: Build and Deploy Node App to EKS
    #needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build Docker Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG ./node-app

      - name: Push Docker Image
        run: |
          docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG

      - name: Setup kubectl
        uses: aws/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup AWS CLI
        uses: aws-actions/aws-cli-action@v1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to EKS
        run: |
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
